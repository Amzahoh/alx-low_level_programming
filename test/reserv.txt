#include "main.h"
/**
 * _puts - entry point
 * @str: string pointer
 * Return: always 0
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
}

#include "main.h"
#include <stdio.h>
/** _printf - entry point to the function
 * @format: the format to search
 * return: depends on the case
 */
int main(void)
{
 int len;
    int len2;

    len = _printf("Let's try to printf a simple sentence.\n");
    len2 = printf("Let's try to printf a simple sentence.\n");
    _printf("Length:[%d, %i]\n", len, len);
    printf("Length:[%d, %i]\n", len2, len2);
    _printf("Negative:[%d]\n", -762534);
    printf("Negative:[%d]\n", -762534);
    _printf("Character:[%c]\n", 'H');
    printf("Character:[%c]\n", 'H');
    _printf("String:[%s]\n", "I am a string !");
    printf("String:[%s]\n", "I am a string !");
    len = _printf("Percent:[%%]\n");
    len2 = printf("Percent:[%%]\n");
    _printf("Len:[%d]\n", len);
    printf("Len:[%d]\n", len2);
    _printf("Unknown:[%r]\n");
    printf("Unknown:[%r]\n");
    return (0);
}
#ifndef MAIN_H
#define MAIN_H

#include <stdarg.h>
#include <stddef.h>

int _printf(const char *format, ...);
int _putchar(char c);
void _puts(char *str);
int print_char(va_list args);
int print_string(va_list args);
int _strlen(char *s);
int print_integer(va_list args);
typedef struct format_specificateur
{
    char format;
    int (*fonction)(va_list);
} fs;
#endif
#include"main.h"
#include <stdarg.h>
/**
 * print_char - Prints a character
 * @args: List of arguments
 *
 * Return: Number of characters printed
 */
int print_char(va_list args)
{
    char c = va_arg(args, int);
    _putchar(c);
    return (1);
}
#include "main.h"
/**
 * print_integer - Prints an integer
 * @args: List of arguments
 *
 * Return: Number of characters printed
 */
int print_integer(va_list args)
{
    int n = va_arg(args, int);
    unsigned int num;
    int count = 0;
    int zeros = 0;
    int i = 0;
    int digits[10];

    if (n == 0)
        return (_putchar('0'));

    if (n < 0)
    {
        _putchar('-');
        count++;
        num = -n;
    }
    else
        num = n;

    while (num != 0)
    {
        digits[i] = num % 10;
        num /= 10;
        i++;
    }

    while (i > 0)
    {
        i--;
        _putchar(digits[i] + '0');
        count++;
    }

    while (zeros-- > 0)
    {
        _putchar('0');
        count++;
    }

    return (count);
}
#include "main.h"
#include <stdarg.h>
/**
 * _printf - entry point
 * @format: le format a traiter
 * Return: its depends
 */
int _printf(const char *format, ...)
{
        va_list args;
        int count = 0;

        va_start(args, format);
        while (*format)
        {
                if (*format == '%')
                {
                        format++;
                        if (*format == '\0')
                                break;
                        if (*format == '%')
                                count += _putchar('%'), format++;
                        else
                        {
                                fs specificator[] = {
                                        {'c', print_char},
                                        {'s', print_string},
                                        {'i', print_integer},
                                        {'d', print_integer},
                                        {0, NULL}
                                };
                                int i;

                                for (i = 0; specificator[i].format; i++)
                                {
                                        if (specificator[i].format == *format)
                                        {
                                                count += specificator[i].fonction(args);
                                                break;
                                        }
                                        else if (specificator[i + 1].format == 0)
                                        {
                                                if (*(format + 1) == 'c' ||
                                                    *(format + 1) == 's' ||
                                                    *(format + 1) == 'i' ||
                                                    *(format + 1) == 'd')
                                                {
                                                        count += _putchar('%');
                                                        break;
                                                }
                                                count += _putchar('%'), count += _putchar(*format), format++;
                                        }
                                }
                        }
                }
                else
                        count += _putchar(*format), format++;
        }
        va_end(args);

        return (count);
}
#include"main.h"
#include <stdarg.h>
/**
 * print_str - Prints a character
 * @args: List of arguments
 *
 * Return: Number of characters printed
 */
int print_string(va_list args)
{
    char *str = va_arg(args, char *);
    _puts(str);
    return (_strlen(str));
}
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
#include "main.h"
/**
 * _strlen - calcule la longueur d'une chaîne de caractères
 * @s: la chaîne de caractères
 *
 * Return: le nombre de caractères dans la chaîne (sans compter le caractère nul)
 */
int _strlen(char *s)
{
    int len = 0;

    while (*s != '\0')
    {
        len++;
        s++;
    }

    return len;
}
